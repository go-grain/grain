package handler

import (
  	"{{.ProjectName}}/internal/model/{{.Name}}"
  	"{{.ProjectName}}/internal/service/{{.Name}}"
  	"github.com/go-grain/go-utils/response"
  	"github.com/go-grain/grain/utils/const"
  	"github.com/gin-gonic/gin"
  	"strconv"
)

type {{.StructName}}Handle struct {
	res response.Response
	sv  *service.{{.StructName}}Service
}

func New{{.StructName}}Handle(sv *service.{{.StructName}}Service) *{{.StructName}}Handle {
	return &{{.StructName}}Handle{
		sv: sv,
	}
}

// Create{{.StructName}}
// @Security ApiKeyAuth
// @Summary 创建{{.Description}}
// @Description 创建{{.Description}}
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param data body  model.Create{{.StructName}} true "{{.Description}}信息"
// @Success 200 {object} model.ErrorRes "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Router /{{.Name}} [post]
func (r *{{.StructName}}Handle) Create{{.StructName}}(ctx *gin.Context) {
	reply := r.res.New()
	{{.Name}} := model.{{.StructName}}{}
	err := ctx.ShouldBindJSON(&{{.Name}})
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
		return
	}
	err = r.sv.Create{{.StructName}}(&{{.Name}},ctx)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
		return
	}
	reply.WithMessage("创建{{.Description}}成功").Success(ctx)
}

// Update{{.StructName}}
// @Security ApiKeyAuth
// @Summary 更新{{.Description}}
// @Description 更新{{.Description}}信息
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param data body  model.Update{{.StructName}} true "更新{{.Description}}信息"
// @Success 200 {object} model.ErrorRes "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Failure 404 {object} model.ErrorRes "资源不存在"
// @Router /{{.Name}} [put]
func (r *{{.StructName}}Handle) Update{{.StructName}}(ctx *gin.Context) {
	reply := r.res.New()
	{{.Name}} := model.{{.StructName}}{}
	err := ctx.ShouldBindJSON(&{{.Name}})
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage("解析{{.Description}}参数失败").Fail(ctx)
		return
	}
	err = r.sv.Update{{.StructName}}(&{{.Name}},ctx)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
		return
	}
	reply.WithMessage("更新{{.Description}}成功").Success(ctx)
}

// Get{{.StructName}}ById
// @Security ApiKeyAuth
// @Summary 根据{{.Description}}ID获取信息
// @Description 根据{{.Description}}ID获取信息
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param id query  int true "{{.Description}}ID "
// @Success 200 {object} model.{{.StructName}} "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Failure 404 {object} model.ErrorRes "资源不存在"
// @Router /{{.Name}} [get]
func (r *{{.StructName}}Handle) Get{{.StructName}}ById(ctx *gin.Context) {
	reply := r.res.New()
	{{.Name}}Id, _ := strconv.Atoi(ctx.Query("id"))
	{{.Name}}Info, err := r.sv.Get{{.StructName}}ById(uint({{.Name}}Id),ctx)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
		return
	}
	reply.WithMessage("成功").WithData({{.Name}}Info).Success(ctx)
}

// Get{{.StructName}}List
// @Security ApiKeyAuth
// @Summary 获取{{.Description}}分页数据
// @Description 获取{{.Description}}分页数据
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param data body model.{{.StructName}}Query true "分页列表请求参数"
// @Success 200 {object} model.{{.StructName}} "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Failure 404 {object} model.ErrorRes "资源不存在"
// @Router /{{.Name}}/list [get]
func (r *{{.StructName}}Handle) Get{{.StructName}}List(ctx *gin.Context) {
	reply := r.res.New()
	query := model.{{.StructName}}Query{}
	err := ctx.ShouldBindQuery(&query)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage("参数解析失败").Fail(ctx)
		return
	}
	list, err := r.sv.Get{{.StructName}}List(&query,ctx)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
		return
	}

	reply.WithMessage("成功").
		WithData(list).
		WithTotal(query.Total).
		WithPage(query.Page).
		WithPageSize(query.PageSize).
		Success(ctx)
}


// Delete{{.StructName}}ById
// @Security ApiKeyAuth
// @Summary 删除{{.Description}}
// @Description 根据{{.Description}}ID删除{{.Description}}
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param id query  int true "根据{{.Description}}ID删除{{.Description}} "
// @Success 200 {object} model.ErrorRes "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Failure 404 {object} model.ErrorRes "资源不存在"
// @Router /{{.Name}} [delete]
func (r *{{.StructName}}Handle) Delete{{.StructName}}ById(ctx *gin.Context) {
	reply := r.res.New()
	{{.Name}}Id, _ := strconv.Atoi(ctx.Query("id"))
	err := r.sv.Delete{{.StructName}}ById(uint({{.Name}}Id),ctx)
	if err != nil {
		reply.WithCode(consts.ReqFail).WithMessage("删除{{.Description}}失败").Fail(ctx)
		return
	}
	reply.WithMessage("删除{{.Description}}成功").Success(ctx)
}

// Delete{{.StructName}}ByIds
// @Security ApiKeyAuth
// @Summary 删除{{.Description}}
// @Description "根据{{.Description}}ID批量删除{{.Description}}"
// @Tags {{.Description}}
// @Accept json
// @Produce json
// @Param data body []uint true "根据{{.Description}}ID批量删除{{.Description}}"
// @Success 200 {object} model.ErrorRes "成功"
// @Failure 400 {object} model.ErrorRes "格式错误"
// @Failure 401 {object} model.ErrorRes "未经授权"
// @Failure 404 {object} model.ErrorRes "资源不存在"
// @Router /{{.Name}}/{{.Name}}ByIds [delete]
func (r *{{.StructName}}Handle) Delete{{.StructName}}ByIds(ctx *gin.Context) {
	reply := r.res.New()
  	api := struct {
  		{{.StructName}}Ids []uint `json:"ids"`
  	}{}
  	err := ctx.ShouldBindJSON(&api)
  	if err != nil {
  		reply.WithCode(consts.ReqFail).WithMessage(err.Error()).Fail(ctx)
  		return
  	}
  	err = r.sv.Delete{{.StructName}}ByIds(api.{{.StructName}}Ids, ctx)
  	if err != nil {
  		reply.WithCode(consts.ReqFail).WithMessage("删除{{.Description}}失败").Fail(ctx)
  		return
  	}
  	reply.WithMessage("删除{{.Description}}成功").Success(ctx)
}