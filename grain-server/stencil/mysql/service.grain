package service

import (
	"errors"
	"{{.ProjectName}}/log"
	"{{.ProjectName}}/config"
	"{{.ProjectName}}/internal/model/{{.Name}}"
	"github.com/go-grain/go-utils/redis"
	"github.com/gin-gonic/gin"

)

type I{{.StructName}}Repo interface {
  Create{{.StructName}}({{.Name}} *model.{{.StructName}}) error
	Get{{.StructName}}ById(id uint,uid string) (u *model.{{.StructName}}, err error)
	Get{{.StructName}}List(req *model.{{.StructName}}Query) ([]*model.{{.StructName}}, error)
	Update{{.StructName}}({{.Name}} *model.{{.StructName}}) error
	Delete{{.StructName}}ById({{.Name}}Id uint,uid string) error
	Delete{{.StructName}}ByIds({{.Name}}Ids []uint,uid string) error
}

type {{.StructName}}Service struct {
	repo I{{.StructName}}Repo
	rdb  redis.IRedis
	conf *config.Config
	log  *log.Logger
}

func New{{.StructName}}Service(repo I{{.StructName}}Repo, rdb redis.IRedis, conf *config.Config,logger *log.Logger) *{{.StructName}}Service {
	return &{{.StructName}}Service{
		repo: repo,
		rdb:  rdb,
		conf: conf,
		log:  logger,
	}
}

func (s *{{.StructName}}Service) Create{{.StructName}}({{.Name}} *model.{{.StructName}},ctx *gin.Context) error {
	{{.Name}}.UID = ctx.GetString("uid")
	err := s.repo.Create{{.StructName}}({{.Name}})
  if err != nil {
      		s.log.Sava(s.log.OperationLog(400, "创建{{.Description}}", {{.Name}}, ctx))
      		return err
      	}
      	s.log.Sava(s.log.OperationLog(200, "创建{{.Description}}", {{.Name}}, ctx))
  return nil
}

func (s *{{.StructName}}Service) Get{{.StructName}}ById({{.Name}}Id uint,ctx *gin.Context) (*model.{{.StructName}}, error) {
	uid := ctx.GetString("uid")
	return s.repo.Get{{.StructName}}ById({{.Name}}Id,uid)
}

func (s *{{.StructName}}Service) Get{{.StructName}}List(req *model.{{.StructName}}Query,ctx *gin.Context) ([]*model.{{.StructName}}, error ) {
	list, err := s.repo.Get{{.StructName}}List(req)
	if err != nil {
  		return nil, err
  	}
  	if len(list) == 0 {
  		return nil, errors.New("暂无更多数据")
  	}
    return list, err
}

func (s *{{.StructName}}Service) Update{{.StructName}}({{.Name}} *model.{{.StructName}},ctx *gin.Context) error {
	{{.Name}}.UID = ctx.GetString("uid")
	err := s.repo.Update{{.StructName}}({{.Name}})
	if err != nil {
      		s.log.Sava(s.log.OperationLog(400, "更新{{.Description}}", {{.Name}}, ctx))
      		return err
      	}
      	s.log.Sava(s.log.OperationLog(200, "更新{{.Description}}", {{.Name}}, ctx))
    return nil
}

func (s *{{.StructName}}Service) Delete{{.StructName}}ById({{.Name}}Id uint,ctx *gin.Context) error {
	uid := ctx.GetString("uid")
	err := s.repo.Delete{{.StructName}}ById({{.Name}}Id,uid)
	if err != nil {
        		s.log.Sava(s.log.OperationLog(400, "删除{{.Description}}", {{.Name}}Id, ctx))
        		return err
        	}
        	s.log.Sava(s.log.OperationLog(200, "删除{{.Description}}", {{.Name}}Id, ctx))
    return nil
}

func (s *{{.StructName}}Service) Delete{{.StructName}}ByIds({{.Name}}Ids []uint,ctx *gin.Context) error {
	uid := ctx.GetString("uid")
	err :=  s.repo.Delete{{.StructName}}ByIds({{.Name}}Ids,uid)
	if err != nil {
        		s.log.Sava(s.log.OperationLog(400, "删除{{.Description}}", {{.Name}}Ids, ctx))
        		return err
        	}
        	s.log.Sava(s.log.OperationLog(200, "删除{{.Description}}", {{.Name}}Ids, ctx))
    return nil
}

