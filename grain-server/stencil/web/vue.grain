<template>
  <div class="container">
  <a-modal
      v-model:visible="dialogFormVisible"
      :title="dialogFormTitle"
      @cancel="add{{.StructName}}Cancel"
      @before-ok="add{{.StructName}}Confirm"
    >
      <a-form :model="{{.Name}}Form">
        {{range .Fields}}	<a-form-item field="{{.Name}}"
          :label="$t('{{ModelNameB}}DialogForm.{{.Name}}')"
          {{if eq .Required "yes"}}:rules="[
          { required: true,
            message: $t('{{ModelNameB}}DialogForm.error.{{.Name}}')}]"{{end}}
          >
           {{ if eq .Type "number"}}<a-input-number{{else}}<a-input{{end}}
             v-model="{{ModelNameB}}Form.{{.Name}}"
             :placeholder="$t('{{ModelNameB}}DialogForm.{{.Name}}.prompt')"
             allow-clear
           />
         </a-form-item>
        {{end}}
      </a-form>
    </a-modal>

    <Breadcrumb :items="['menu.{{.Name}}', 'menu.{{.Name}}']" />
    <a-card>
    {{if eq .IsQueryCriteria true}}
      <a-row>
       <a-col :flex="1">
        <a-form
          :model="queryForm"
          :label-col-props="{ span: 6 }"
          :wrapper-col-props="{ span: 18 }"
          label-align="left"
        >
          <a-row :gutter="16">
          {{if eq .QueryTime "yes"}}
             <a-col :span="8">
              <a-form-item
                field="queryTime"
                :label="$t('{{ModelNameB}}Query.form.queryTime')"
              >
                <a-range-picker
                  v-model="queryForm.queryTime"
                  style="width: 100%"
                />
              </a-form-item>
            </a-col>{{end}}
          {{range .Fields}}{{if .QueryCriteria}}
            <a-col :span="8">
              <a-form-item
                field="{{.Name}}"
                :label="$t('{{ModelNameB}}Query.form.{{.Name}}')"
              >
                {{ if eq .Type "number"}}<a-input-number
                {{else}}<a-input{{end}}
                v-model="queryForm.{{.Name}}"
                :placeholder="$t('{{ModelNameB}}Query.form.{{.Name}}.prompt')"
                allow-clear
              />
              </a-form-item>
            </a-col>{{end}}{{end}}
          </a-row>

        </a-form>
      </a-col>
        <a-divider style="height: 84px" direction="vertical" />
        <a-col :flex="'60px'" style="text-align: start">
          <a-space direction="vertical" :size="18">
            <a-button type="primary" @click="search">
              <template #icon>
                <icon-search />
              </template>
              {{ "{{$t('{{ModelNameB}}Query.form.search')}}" }}
            </a-button>
            <a-button @click="reset">
              <template #icon>
                <icon-refresh />
              </template>
              {{ "{{$t('{{ModelNameB}}Query.form.reset')}}" }}
            </a-button>
          </a-space>
        </a-col>
      </a-row>{{end}}

      <a-divider style="margin-top: 0" />

      <a-row style="margin-bottom: 16px">
        <a-col :span="12">
          <a-space>
            <a-button type="primary" @click="create{{.StructName}}ButtonClick()">
              <template #icon>
                <icon-plus />
              </template>
              {{ "{{$t('add{{ModelNameA}}Button.Title')}}" }}
            </a-button>
          </a-space>
        </a-col>
      </a-row>

      <a-table
        row-key="id"
        :loading="loading"
        :columns="columns"
        :data="{{.Name}}DataList"
        :pagination="pagination"
        :bordered="{ cell: true }"
        column-resizable
        stripe
        @page-change="onPageChange"
      >
        <template #index="{ rowIndex }">
          {{ "{{rowIndex + 1 + (pagination.page - 1) * pagination.pageSize}}" }}
        </template>

        <template #operations="{ record, rowIndex }">
          <a-button type="text" size="small" @click="edit{{.StructName}}(record)">
            {{ "{{$t('{{ModelNameB}}Table.columns.operations.edit')}}" }}
          </a-button>

          <a-popconfirm
            :content="$t('{{.Name}}Table.columns.operations.delete.prompt')"
            type="warning"
            @ok="delete{{.StructName}}(record.id, rowIndex)"
          >
            <a-button type="text" size="small" status="danger">
              {{ "{{$t('{{ModelNameB}}Table.columns.operations.delete')}}" }}
            </a-button>
          </a-popconfirm>
        </template>
      </a-table>
    </a-card>
  </div>
</template>

<script lang="ts" setup>
  import {
    {{.StructName}}s,
    Get{{.StructName}}List,
    Add{{.StructName}},
    Update{{.StructName}},
    Delete{{.StructName}},
  } from '@/api/{{.Name}}';
  import type { TableColumnData } from '@arco-design/web-vue/es/table/interface';
  import { Pagination } from '@/types/global';
  import { computed, reactive, ref } from 'vue';
  import { Message } from '@arco-design/web-vue';
  import { useI18n } from 'vue-i18n';

  const generateFormModel = () => {
    return {
    {{if eq .DatabaseName "mongo"}}id: '',{{else}}id: 0,{{end}}
    {{range .Fields}}	{{if eq .Type "number"}}{{.Name}}: 0,{{else}}{{.Name}}: '',{{end}}
    {{end}}{{if eq .QueryTime "yes"}} queryTime: '',{{end}}
    };
  };

  const isEdit = ref(false);
  const dialogFormVisible = ref(false);
  const dialogFormTitle = ref('添加{{.Description}}');
  let {{.Name}}Form = reactive(generateFormModel());

  const { t } = useI18n();
  const {{.Name}}DataList = ref<{{.StructName}}s>([]);
  const loading = ref(false);
  const queryForm = ref(generateFormModel());


  const basePagination: Pagination = {
    page: 1,
    pageSize: 20,
  };

  const pagination = reactive({
    ...basePagination,
  });

  const get{{.StructName}}s = async (params: Pagination = { page: 1, pageSize: 20 }) => {
    loading.value = true;
    try {
      const list = await Get{{.StructName}}List(params);
      {{.Name}}DataList.value = list.data;
      pagination.total = list.total;
      pagination.page = list.page as number;
    } catch (err) {
      // you can report use errorHandler or other
    } finally {
      loading.value = false;
    }
  };

  const search = () => {
    get{{.StructName}}s({
      ...basePagination,
      ...queryForm.value,
    });
  };

  const reset = () => {
    queryForm.value = generateFormModel();
    get{{.StructName}}s();
  };

  const delete{{.StructName}} = async (id: number, index: number) => {
    const res = await Delete{{.StructName}}(id);
    if (res.success) {
      Message.success(res.message ?? '请求错误');
      {{.Name}}DataList.value.splice(index, 1);
    } else {
      Message.warning(res.message ?? '请求错误');
    }
  };

  const edit{{.StructName}} = (data: any) => {
    dialogFormTitle.value = t('{{.Name}}Table.columns.operations.edit');
    {{ModelNameB}}Form.id = data.id;
    {{ range .Fields}}{{ModelNameB}}Form.{{.Name}} = data.{{.Name}}
    {{end}}
    dialogFormVisible.value = true;
    isEdit.value = true;
  };
  const onPageChange = (current: number) => {
    get{{.StructName}}s({ ...basePagination, page: current });
  };

  const create{{.StructName}}ButtonClick = () => {
    dialogFormTitle.value = t('add{{.StructName}}Button.Title');
    dialogFormVisible.value = true;
    isEdit.value = false;
  };
  const clearForm = () => {
  {{if eq .DatabaseName "mongo"}} {{ModelNameB}}Form.id = '';{{else}}{{ModelNameB}}Form.id = 0;{{end}}
   {{range .Fields}}	{{if eq .Type "number"}}{{ModelNameB}}Form.{{.Name}} = 0;{{else}}{{ModelNameB}}Form.{{.Name}} = '';{{end}}
   {{end}}{{if eq .QueryTime "yes"}} {{ModelNameB}}Form.queryTime = undefined;{{end}}
   };
  const add{{.StructName}}Cancel = () => {
    dialogFormVisible.value = false;
    clearForm();
  };

  const add{{.StructName}}Confirm = async () => {
    let res;
    if (isEdit.value) {
      res = await Update{{.StructName}}({{.Name}}Form);
    } else {
      res = await Add{{.StructName}}({{.Name}}Form);
    }
    if (res.success) {
      Message.success(res.message ?? '请求错误');
      onPageChange(pagination.page);
    } else {
      Message.warning(res.message ?? '请求错误');
    }
  };

  get{{.StructName}}s();

    const columns = computed<TableColumnData[]>(() => [
    {
      title: t('{{.Name}}Table.columns.index'),
      dataIndex: 'index',
      slotName: 'index',
    },
     {{range .Fields}}	 {
      title: t('{{ModelNameB}}Table.columns.{{.Name}}'),
      dataIndex: '{{.Name}}',
      slotName: '{{.Name}}',
    },
   {{end}}
     {
       title: t('{{ModelNameB}}Table.columns.operations'),
       dataIndex: 'operations',
       slotName: 'operations',
     },
   ]);

</script>

<style>
  .container {
    padding: 0 20px 20px 20px;
  }
</style>
